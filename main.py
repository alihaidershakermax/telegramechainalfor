from telethon import TelegramClient, events
import re
import os
import logging
import asyncio

# ุฅุนุฏุงุฏุงุช ุชุณุฌูู ุงูุฃุฎุทุงุก (Logging)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ุฌูุจ ุงูููู ูู ุงููุชุบูุฑุงุช ุงูุจูุฆูุฉ ุจุฏูุงู ูู ูุชุงุจุชูุง ูุจุงุดุฑุฉ (ุฃูุงู ุฃูุซุฑ)
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
SOURCE_CHANNELS = list(map(int, os.getenv("SOURCE_CHANNELS").split(',')))  # ุชุญููู ุงููุต ุฅูู ูุงุฆูุฉ ุฃุฑูุงู
TARGET_CHANNEL = int(os.getenv("TARGET_CHANNEL"))

# ูุงุฆูุฉ ุงูุชุตูููุงุช
CATEGORIES = {
    'ุฃุฎุจุงุฑ': ['ุฎุจุฑ', 'ุนุงุฌู', 'ุณูุงุณุฉ', 'ุงูุชุตุงุฏ'],
    'ุฑูุงุถุฉ': ['ูุจุงุฑุงุฉ', 'ูุฑุฉ ูุฏู', 'ุงูุฏูุฑู', 'ุงูููุชุฎุจ'],
    'ุชุฑููู': ['ูููู', 'ูุณูุณู', 'ุฃุบููุฉ', 'ุญููุฉ'],
    'ุชุนููู': ['ุฏูุฑุฉ', 'ูุญุงุถุฑุฉ', 'ุชุนููู', 'ูุฏุฑุณุฉ', 'ุฌุงูุนุฉ']
}

def classify_text(text):
    """ุชุญุฏูุฏ ุชุตููู ุงููุต ุจูุงุกู ุนูู ุงููููุงุช ุงูููุชุงุญูุฉ"""
    for category, keywords in CATEGORIES.items():
        if any(re.search(rf'\b{keyword}\b', text, re.IGNORECASE) for keyword in keywords):
            return category
    return 'ุนุงู'

client = TelegramClient('bot_session', API_ID, API_HASH)

async def start_bot():
    try:
        await client.start(bot_token=BOT_TOKEN)
        logger.info("โ ุงูุจูุช ูุชุตู ูุฌุงูุฒ ููุนูู ุนูู Koyeb...")
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ุฃุซูุงุก ุจุฏุก ุงูุจูุช: {e}")
        raise e

@client.on(events.NewMessage(chats=SOURCE_CHANNELS))
async def handler(event):
    try:
        message = event.message
        text = message.text if message.text else getattr(message, 'caption', '')  # ุฌูุจ ุงููุต ุฃู ุงูุชุณููุฉ ุงูุชูุถูุญูุฉ
        media = message.media  # ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ุชุญุชูู ุนูู ููู

        if text:
            category = classify_text(text)
            formatted_message = f'๐ ุงูุชุตููู: {category}\n\n{text}'
        else:
            formatted_message = '๐ ุงูุชุตููู: ุบูุฑ ูุญุฏุฏ (ููู ุจุฏูู ูุตู)'

        if media:  # ุฅุฐุง ูุงูุช ุงูุฑุณุงูุฉ ุชุญุชูู ุนูู ูุณุงุฆุท (ุตูุฑุ ููุฏููุ ูููุงุชุ ุฅูุฎ)
            await client.send_message(TARGET_CHANNEL, formatted_message, file=media)
            logger.info(f"๐ค ุชู ุฅุฑุณุงู ููู{' ูุน ูุตู' if text else ' ุจุฏูู ูุตู'} ุฅูู ุงูููุงุฉ ุงููุณุชูุฏูุฉ.")
        else:
            await client.send_message(TARGET_CHANNEL, formatted_message)
            logger.info(f"๐ค ุชู ุฅุฑุณุงู ุฑุณุงูุฉ ูุตูุฉ ููุท ุฅูู ุงูููุงุฉ ุงููุณุชูุฏูุฉ.")

    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ: {e}")

async def main():
    await start_bot()
    await client.run_until_disconnected()

# ุชุดุบูู ุงูุจูุช ูู Koyeb ุจุดูู ุบูุฑ ูุชุฒุงูู
if __name__ == "__main__":
    asyncio.run(main())
